{
  "openapi": "3.1.0",
  "info": {
    "title": "Trust Engine API",
    "description": "API for the Trust Engine protocol, providing services for file registration, verification, and wallet management.",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://core-api-server.onrender.com"
    }
  ],
  "paths": {
    "/health": {
      "get": {
        "summary": "Health Check",
        "description": "Checks the operational status of the Trust Engine API server.",
        "tags": ["Health"],
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl -X GET 'https://core-api-server.onrender.com/health'"
          },
          {
            "lang": "JavaScript",
            "source": "const response = await fetch('https://core-api-server.onrender.com/health', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nresponse = requests.get('https://core-api-server.onrender.com/health')\ndata = response.json()\nprint(data)"
          }
        ],
        "responses": {
          "200": {
            "description": "API is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "All systems operational!"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2024-01-15T10:30:45.123Z"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/create-wallet": {
      "post": {
        "summary": "Create Wallet",
        "description": "Create a new Solana wallet using managed service and link it to a user ID.",
        "tags": ["Wallet"],
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl -X POST 'https://core-api-server.onrender.com/create-wallet' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"userID\": \"user-12345\"\n  }'"
          },
          {
            "lang": "JavaScript",
            "source": "const response = await fetch('https://core-api-server.onrender.com/create-wallet', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({\n    userID: 'user-12345'\n  })\n});\n\nconst data = await response.json();\nconsole.log(data);"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nresponse = requests.post(\n    'https://core-api-server.onrender.com/create-wallet',\n    headers={'Content-Type': 'application/json'},\n    json={\n        'userID': 'user-12345'\n    }\n)\n\ndata = response.json()\nprint(data)"
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$url = 'https://core-api-server.onrender.com/create-wallet';\n$data = json_encode([\n    'userID' => 'user-12345'\n]);\n\n$options = [\n    'http' => [\n        'header' => 'Content-Type: application/json',\n        'method' => 'POST',\n        'content' => $data,\n    ],\n];\n\n$context = stream_context_create($options);\n$result = file_get_contents($url, false, $context);\n$data = json_decode($result, true);\n\nprint_r($data);\n?>"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\turl := \"https://core-api-server.onrender.com/create-wallet\"\n\tpayload := map[string]string{\n\t\t\"userID\": \"user-12345\",\n\t}\n\n\tjsonData, _ := json.Marshal(payload)\n\treq, err := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonData))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, _ := ioutil.ReadAll(resp.Body)\n\tfmt.Println(string(body))\n}"
          },
          {
            "lang": "Java",
            "source": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic class CreateWallet {\n    public static void main(String[] args) {\n        try {\n            URL url = new URL(\"https://core-api-server.onrender.com/create-wallet\");\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n            conn.setRequestMethod(\"POST\");\n            conn.setRequestProperty(\"Content-Type\", \"application/json\");\n            conn.setDoOutput(true);\n\n            String jsonInputString = \"{\\\"userID\\\": \\\"user-12345\\\"}\";\n            try(OutputStream os = conn.getOutputStream()) {\n                byte[] input = jsonInputString.getBytes(\"utf-8\");\n                os.write(input, 0, input.length);\n            }\n\n            try(BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream(), \"utf-8\"))) {\n                StringBuilder response = new StringBuilder();\n                String responseLine = null;\n                while ((responseLine = br.readLine()) != null) {\n                    response.append(responseLine.trim());\n                }\n                System.out.println(response.toString());\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWalletRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Wallet created successfully and linked to user ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateWalletResponse"
                },
                "examples": {
                  "success": {
                    "summary": "Wallet Created Successfully",
                    "value": {
                      "message": "Success! Your managed wallet has been created and linked to your user ID.",
                      "details": {
                        "walletAddress": "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM",
                        "chain": "solana",
                        "transactionId": "5J7X2vK8mWzNfEtY2jDw5mVpL1WzNfEtYKJH2mNqR3pB",
                        "explorerUrl": "https://explorer.solana.com/address/8kQv2gFhgRmHq7ZPBx4N9TqJbSx3jDw5mVpL1WzNfEtY?cluster=devnet",
                        "userID": "user-12345"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Input validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                },
                "examples": {
                  "missing-userid": {
                    "summary": "Missing User ID",
                    "value": {
                      "error": true,
                      "message": "<error message>",
                      "details": {
                        "validationErrors": [
                          {
                            "type": "missing_fields",
                            "fields": ["userID"],
                            "message": "<error message>"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict - User ID already has a wallet or wallet already linked",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateWalletConflictResponse"
                },
                "examples": {
                  "userid-already-linked": {
                    "summary": "User ID Already Has Wallet",
                    "value": {
                      "error": true,
                      "message": "<error message>",
                      "details": {
                        "conflictType": "User ID already linked",
                        "userID": "user-12345",
                        "existingWallet": "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM",
                        "suggestion": "Use a different User ID or use the existing wallet"
                      }
                    }
                  },
                  "wallet-already-linked": {
                    "summary": "Wallet Already Linked",
                    "value": {
                      "error": true,
                      "message": "<error message>",
                      "details": {
                        "conflictType": "Wallet already linked",
                        "walletAddress": "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM",
                        "existingUserID": "existing-user",
                        "suggestion": "This should not happen with managed wallet creation"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerErrorResponse"
                },
                "examples": {
                  "server-error": {
                    "summary": "Internal Server Error",
                    "value": {
                      "error": true,
                      "message": "<error message>"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/register": {
      "post": {
        "summary": "Register File",
        "description": "Register a new file using its content hash and metadata.",
        "tags": ["File Operations"],
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "# Example 1: Managed wallet (automatic signing)\ncurl -X POST 'https://core-api-server.onrender.com/register' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"contentTitle\": \"My Important Document\",\n    \"walletAddress\": \"9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM\",\n    \"walletType\": \"managed\",\n    \"contentHash\": \"a7b2c3d4e5f6789abcdef0123456789abcdef0123456789abcdef0123456789\"\n  }'\n\n# Example 2: Self wallet with action link (recommended)\ncurl -X POST 'https://core-api-server.onrender.com/register' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"contentTitle\": \"My Important Document\",\n    \"walletAddress\": \"9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM\",\n    \"walletType\": \"self\",\n    \"contentHash\": \"a7b2c3d4e5f6789abcdef0123456789abcdef0123456789abcdef0123456789\",\n    \"returnActionLink\": true\n  }'"
          },
          {
            "lang": "JavaScript",
            "source": "// Example 1: Managed wallet (automatic signing)\nconst response1 = await fetch('https://core-api-server.onrender.com/register', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({\n    contentTitle: 'My Important Document',\n    walletAddress: '9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM',\n    walletType: 'managed',\n    contentHash: 'a7b2c3d4e5f6789abcdef0123456789abcdef0123456789abcdef0123456789'\n  })\n});\n\n// Example 2: Self wallet with action link (recommended)\nconst response2 = await fetch('https://core-api-server.onrender.com/register', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({\n    contentTitle: 'My Important Document',\n    walletAddress: '9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM',\n    walletType: 'self',\n    contentHash: 'a7b2c3d4e5f6789abcdef0123456789abcdef0123456789abcdef0123456789',\n    returnActionLink: true\n  })\n});\n\nconst data = await response1.json();\nconsole.log(data);"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nresponse = requests.post(\n    'https://core-api-server.onrender.com/register',\n    headers={'Content-Type': 'application/json'},\n    json={\n        'contentTitle': 'My Important Document',\n        'walletAddress': '9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM',\n        'walletType': 'managed',\n        'contentHash': 'a7b2c3d4e5f6789abcdef0123456789abcdef0123456789abcdef0123456789'\n   }\n)\n\ndata = response.json()\nprint(data)"
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$url = 'https://core-api-server.onrender.com/register';\n$data = json_encode([\n    'contentTitle' => 'My Important Document',\n    'walletAddress' => '9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM',\n    'walletType' => 'managed',\n    'contentHash' => 'a7b2c3d4e5f6789abcdef0123456789abcdef0123456789abcdef0123456789'\n]);\n\n$options = [\n    'http' => [\n        'header' => 'Content-Type: application/json',\n        'method' => 'POST',\n        'content' => $data,\n    ],\n];\n\n$context = stream_context_create($options);\n$result = file_get_contents($url, false, $context);\n$data = json_decode($result, true);\n\nprint_r($data);\n?>"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\turl := \"https://core-api-server.onrender.com/register\"\n\tmethod := \"POST\"\n\n\tclient := &http.Client {}\n\treq, err := http.NewRequest(method, url, nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\treq.Header.Add(\"Content-Type\", \"application/json\")\n\n\tres, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer res.Body.Close()\n\n\tbody, err := ioutil.ReadAll(res.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tvar response map[string]interface{}\n\n\terr = json.Unmarshal(body, &response)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tjson.NewEncoder(os.Stdout).Encode(response)\n}"
          },
          {
            "lang": "Java",
            "source": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic class RegisterFile {\n    public static void main(String[] args) {\n        try {\n            URL url = new URL(\"https://core-api-server.onrender.com/register\");\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n            conn.setRequestMethod(\"POST\");\n            conn.setRequestProperty(\"Content-Type\", \"application/json\");\n            conn.setDoOutput(true);\n\n            String jsonInputString = \"{\\\"contentTitle\\\": \\\"My Important Document\\\", \\\"walletAddress\\\": \\\"9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM\\\", \\\"walletType\\\": \\\"managed\\\", \\\"contentHash\\\": \\\"a7b2c3d4e5f6789abcdef0123456789abcdef0123456789abcdef0123456789\\\"}\";\n            try(OutputStream os = conn.getOutputStream()) {\n                byte[] input = jsonInputString.getBytes(\"utf-8\");\n                os.write(input, 0, input.length);\n            }\n\n            try(BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream(), \"utf-8\"))) {\n                StringBuilder response = new StringBuilder();\n                String responseLine = null;\n                while ((responseLine = br.readLine()) != null) {\n                    response.append(responseLine.trim());\n                }\n                System.out.println(response.toString());\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterFileRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Registration confirmed - Managed wallet transaction completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterFileManagedResponse"
                },
                "examples": {
                  "managed-success": {
                    "summary": "Managed Success",
                    "value": {
                      "message": "✅ Success! Your file has been registered and confirmed on-chain.",
                      "details": {
                        "status": "submitted",
                        "transactionId": "5J7X2vK8mWzNfEtY2jDw5mVpL1WzNfEtYKJH2mNqR3pB",
                        "contentRegistrationPDA": "8kQv2gFhgRmHq7ZPBx4N9TqJbSx3jDw5mVpL1WzNfEtY",
                        "contentHash": "a1b2c3d4e5f6789012345678901234567890abcdef123456789012345678901234",
                        "ipfsCid": "QmX7Rt8VBgKdNzF4mP6YvWzNfEtY2jDw5mVpL1WzNfEtYz",
                        "explorerUrl": "https://explorer.solana.com/address/8kQv2gFhgRmHq7ZPBx4N9TqJbSx3jDw5mVpL1WzNfEtY?cluster=devnet"
                      }
                    }
                  }
                }
              }
            }
          },
          "202": {
            "description": "Registration accepted - Self wallet transaction prepared for signing or action link created",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/RegisterFileSelfResponse"
                    },
                    {
                      "$ref": "#/components/schemas/RegisterFileActionLinkResponse"
                    }
                  ]
                },
                "examples": {
                  "action-link-created": {
                    "summary": "Action Link Created (returnActionLink: true)",
                    "value": {
                      "message": "Transaction prepared and action link created. Use the link to sign the transaction.",
                      "details": {
                        "status": "action-link-created",
                        "actionLink": "http://trustengine.org/tx-action/abc123def456789",
                        "token": "abc123def456789",
                        "expiresAt": "2024-01-25T15:30:00.000Z",
                        "contentHash": "a1b2c3d4e5f6789012345678901234567890abcdef123456789012345678901234"
                      }
                    }
                  },
                  "self-wallet-success": {
                    "summary": "Self Wallet Success (returnActionLink: false)",
                    "value": {
                      "message": "Transaction prepared and pre-signed. Please sign and submit via your wallet.",
                      "details": {
                        "status": "requires-client-signature",
                        "transaction": "AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAEDArczbMia1tLmq2poQiNXU2xnkV4S4gK9bS6Kz...",
                        "ipfsCid": "QmX7Rt8VBgKdNzF4mP6YvWzNfEtY2jDw5mVpL1WzNfEtYz",
                        "contentRegistrationPDA": "8kQv2gFhgRmHq7ZPBx4N9TqJbSx3jDw5mVpL1WzNfEtY",
                        "contentHash": "a1b2c3d4e5f6789012345678901234567890abcdef123456789012345678901234"
                      }
                    }
                  }
                }
              }
            }
          },

          "400": {
            "description": "Bad Request - Input validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                },
                "examples": {
                  "validation-errors": {
                    "summary": "Input Validation Failed",
                    "value": {
                      "error": true,
                      "message": "<error message>",
                      "details": {
                        "validationErrors": [
                          {
                            "type": "missing_fields",
                            "fields": ["contentTitle", "walletAddress"],
                            "message": "<error message>"
                          },
                          {
                            "type": "invalid_value",
                            "field": "walletType",
                            "message": "<error message>"
                          }
                        ]
                      }
                    }
                  },
                  "metadata-too-long": {
                    "summary": "Metadata Too Long",
                    "value": {
                      "error": true,
                      "message": "<error message>",
                      "details": {
                        "validationErrors": [
                          {
                            "type": "invalid_value",
                            "field": "metadata",
                            "message": "<error message>"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict - File already registered or missing user-wallet relation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictErrorResponse"
                },
                "examples": {
                  "file-already-registered": {
                    "summary": "File Already Registered",
                    "value": {
                      "error": true,
                      "message": "<error message>",
                      "details": {
                        "contentHash": "a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3",
                        "pdaAddress": "8kQv2gFhgRmHq7ZPBx4N9TqJbSx3jDw5mVpL1WzNfEtY",
                        "suggestion": "Use the /search endpoint to find the existing record."
                      }
                    }
                  },
                  "no-user-relation": {
                    "summary": "No User-Wallet Relation",
                    "value": {
                      "error": true,
                      "message": "<error message>",
                      "details": {
                        "missingRequirement": "User-Key Relation",
                        "walletAddress": "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM",
                        "suggestion": "Use the /link-wallet endpoint to link your wallet to a user ID first",
                        "alternative": "Use the /create-wallet endpoint to create a new wallet with automatic user ID linking",
                        "findExisting": "Use the /find-wallet endpoint to check if a relation already exists"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerErrorResponse"
                },
                "examples": {
                  "ipfs-upload-failed": {
                    "summary": "IPFS Upload Failed",
                    "value": {
                      "error": true,
                      "message": "<error message>"
                    }
                  },
                  "ipfs-invalid-response": {
                    "summary": "IPFS Invalid Response",
                    "value": {
                      "error": true,
                      "message": "<error message>"
                    }
                  },
                  "managed-error": {
                    "summary": "Managed Transaction Failed",
                    "value": {
                      "error": true,
                      "message": "<error message>"
                    }
                  },
                  "general-server-error": {
                    "summary": "General Server Error",
                    "value": {
                      "error": true,
                      "message": "<error message>",
                      "details": {
                        "error": "Unexpected error during registration process"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/search": {
      "post": {
        "summary": "Search",
        "description": "Searches for existing on-chain registration records by content hash, with optional wallet address filtering.",
        "tags": ["File Operations"],
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "# Example 1: Search by content hash only\ncurl -X POST 'https://core-api-server.onrender.com/search' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"contentHash\": \"a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3\"\n  }'\n\n# Example 2: Search by content hash and wallet address\ncurl -X POST 'https://core-api-server.onrender.com/search' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"contentHash\": \"a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3\",\n    \"walletAddress\": \"9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM\"\n  }'"
          },
          {
            "lang": "JavaScript",
            "source": "// Example 1: Search by content hash only\nconst response1 = await fetch('https://core-api-server.onrender.com/search', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({\n    contentHash: 'a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3'\n  })\n});\n\n// Example 2: Search by content hash and wallet address\nconst response2 = await fetch('https://core-api-server.onrender.com/search', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({\n    contentHash: 'a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3',\n    walletAddress: '9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM'\n  })\n});\n\nconst data = await response1.json();\nconsole.log(data);"
          },
          {
            "lang": "Python",
            "source": "import requests\n\n# Example 1: Search by content hash only\nresponse1 = requests.post(\n    'https://core-api-server.onrender.com/search',\n    headers={'Content-Type': 'application/json'},\n    json={\n        'contentHash': 'a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3'\n    }\n)\n\n# Example 2: Search by content hash and wallet address\nresponse2 = requests.post(\n    'https://core-api-server.onrender.com/search',\n    headers={'Content-Type': 'application/json'},\n    json={\n        'contentHash': 'a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3',\n        'walletAddress': '9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM'\n    }\n)\n\ndata = response1.json()\nprint(data)"
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n// Example 1: Search by content hash only\n$data1 = json_encode([\n    'contentHash' => 'a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3'\n]);\n\n$context1 = stream_context_create([\n    'http' => [\n        'method' => 'POST',\n        'header' => 'Content-Type: application/json',\n        'content' => $data1\n    ]\n]);\n\n$response1 = file_get_contents('https://core-api-server.onrender.com/search', false, $context1);\n$result = json_decode($response1, true);\n\nprint_r($result);\n?>"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tpayload := map[string]string{\n\t\t\"contentHash\": \"a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3\",\n\t}\n\n\tpayloadBytes, _ := json.Marshal(payload)\n\n\tresp, err := http.Post(\n\t\t\"https://core-api-server.onrender.com/search\",\n\t\t\"application/json\",\n\t\tbytes.NewBuffer(payloadBytes),\n\t)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, _ := ioutil.ReadAll(resp.Body)\n\tfmt.Println(string(body))\n}"
          },
          {
            "lang": "Java",
            "source": "import java.io.OutputStream;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic class SearchContent {\n    public static void main(String[] args) {\n        try {\n            URL url = new URL(\"https://core-api-server.onrender.com/search\");\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n            conn.setRequestMethod(\"POST\");\n            conn.setRequestProperty(\"Content-Type\", \"application/json\");\n            conn.setDoOutput(true);\n\n            String jsonPayload = \"{\\\"contentHash\\\":\\\"a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3\\\"}\";\n\n            try(OutputStream os = conn.getOutputStream()) {\n                byte[] input = jsonPayload.getBytes(\"utf-8\");\n                os.write(input, 0, input.length);\n            }\n\n            try(BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream(), \"utf-8\"))) {\n                StringBuilder response = new StringBuilder();\n                String responseLine = null;\n                while ((responseLine = br.readLine()) != null) {\n                    response.append(responseLine.trim());\n                }\n                System.out.println(response.toString());\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Search completed successfully with results found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResponse"
                },
                "examples": {
                  "content-hash-only": {
                    "summary": "Search by Content Hash Only",
                    "value": {
                      "searchMode": "content_hash_only",
                      "message": "Found 2 registration(s) for this content hash.",
                      "searchCriteria": {
                        "contentHash": "a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3"
                      },
                      "totalResults": 2,
                      "registrations": [
                        {
                          "title": "Test File",
                          "contentHash": "a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3",
                          "pdaAddress": "8kQv2gFhgRmHq7ZPBx4N9TqJbSx3jDw5mVpL1WzNfEtY",
                          "ipfsCid": "QmX7Rt8VBgKdNzF4mP6YvWzNfEtY2jDw5mVpL1WzNfEtYz",
                          "registeredBy": "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM",
                          "userID": "user_123456789",
                          "timestamp": "2024-01-15T14:30:25.000Z",
                          "explorerUrl": "https://explorer.solana.com/address/8kQv2gFhgRmHq7ZPBx4N9TqJbSx3jDw5mVpL1WzNfEtY?cluster=devnet",
                          "status": "registered",
                          "metadata": "Test File Metadata", 
                          "identity_data": {
                            "verified_name": "John Doe",
                            "verified_nationality": "United States",
                            "verified_date_of_birth": "1990-01-01",
                            "verified_gender": null,
                            "verified_passport_number": null,
                            "verified_issuing_state": null,
                            "verified_expiry_date": null,
                            "verified_at": "2024-01-15T14:30:25.000Z",
                            "provider": "self"
                          }
                        }
                      ]
                    }
                  },
                  "content-hash-and-wallet": {
                    "summary": "Search by Content Hash and Wallet Address",
                    "value": {
                      "searchMode": "content_hash_and_wallet",
                      "message": "Found the specific registration for this content hash and wallet address.",
                      "searchCriteria": {
                        "contentHash": "a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3",
                        "walletAddress": "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"
                      },
                      "totalResults": 1,
                      "registrations": [
                        {
                          "title": "Test File",
                          "contentHash": "a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3",
                          "pdaAddress": "8kQv2gFhgRmHq7ZPBx4N9TqJbSx3jDw5mVpL1WzNfEtY",
                          "ipfsCid": "QmX7Rt8VBgKdNzF4mP6YvWzNfEtY2jDw5mVpL1WzNfEtYz",
                          "registeredBy": "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM",
                          "userID": "user_123456789",
                          "timestamp": "2024-01-15T14:30:25.000Z",
                          "explorerUrl": "https://explorer.solana.com/address/8kQv2gFhgRmHq7ZPBx4N9TqJbSx3jDw5mVpL1WzNfEtY?cluster=devnet",
                          "status": "registered",
                          "metadata": "Test File Metadata", 
                          "identity_data": {
                            "verified_name": "John Doe",
                            "verified_nationality": "United States",
                            "verified_date_of_birth": "1990-01-01",
                            "verified_gender": null,
                            "verified_passport_number": null,
                            "verified_issuing_state": null,
                            "verified_expiry_date": null,
                            "verified_at": "2024-01-15T14:30:25.000Z",
                            "provider": "self"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Input validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchValidationErrorResponse"
                },
                "examples": {
                  "missing-content-hash": {
                    "summary": "Missing Content Hash",
                    "value": {
                      "error": true,
                      "message": "<error message>",
                      "details": {
                        "validationErrors": [
                          {
                            "type": "missing_fields",
                            "fields": ["contentHash"],
                            "message": "<error message>"
                          }
                        ]
                      }
                    }
                  },
                  "invalid-content-hash-format": {
                    "summary": "Invalid Content Hash Format",
                    "value": {
                      "error": true,
                      "message": "<error message>",
                      "details": {
                        "validationErrors": [
                          {
                            "type": "invalid_format",
                            "field": "contentHash",
                            "message": "<error message>"
                          }
                        ]
                      }
                    }
                  },
                  "invalid-wallet-format": {
                    "summary": "Invalid Wallet Address Format",
                    "value": {
                      "error": true,
                      "message": "<error message>",
                      "details": {
                        "validationErrors": [
                          {
                            "type": "invalid_format",
                            "field": "walletAddress",
                            "message": "<error message>"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict - No registrations found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchNotFoundResponse"
                },
                "examples": {
                  "no-registrations-found": {
                    "summary": "No Registrations Found (Content Hash Only)",
                    "value": {
                      "error": true,
                      "message": "<error message>",
                      "details": {
                        "searchedContentHash": "a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3",
                        "searchMode": "All Registrations"
                      }
                    }
                  },
                  "no-specific-registration": {
                    "summary": "No Specific Registration Found (Content Hash + Wallet)",
                    "value": {
                      "error": true,
                      "message": "<error message>",
                      "details": {
                        "searchedContentHash": "a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3",
                        "searchedWalletAddress": "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM",
                        "searchMode": "Specific Registration"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerErrorResponse"
                },
                "examples": {
                  "server-error": {
                    "summary": "Internal Server Error",
                    "value": {
                      "error": true,
                      "message": "<error message>"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/find-wallet": {
      "get": {
        "summary": "Find Wallet",
        "description": "Find a wallet by user ID or wallet address.",
        "tags": ["Wallet"],
       "x-code-samples": [
          {
            "lang": "cURL",
            "source": "# Example 1: Find by userID\ncurl -X GET 'https://core-api-server.onrender.com/find-wallet?userID=user-12345'\n\n# Example 2: Find by wallet address\ncurl -X GET 'https://core-api-server.onrender.com/find-wallet?walletAddress=9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM'"
          },
          {
            "lang": "JavaScript", 
            "source": "// Example 1: Find by userID\nconst response1 = await fetch('https://core-api-server.onrender.com/find-wallet?userID=user-12345', {\n  method: 'GET'\n});\n\n// Example 2: Find by wallet address\nconst response2 = await fetch('https://core-api-server.onrender.com/find-wallet?walletAddress=9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM', {\n  method: 'GET'\n});"
          },
          {
            "lang": "Python",
            "source": "import requests\n\n# Example 1: Find by userID\nresponse1 = requests.get(\n    'https://core-api-server.onrender.com/find-wallet',\n    params={'userID': 'user-12345'}\n)\n\n# Example 2: Find by wallet address\nresponse2 = requests.get(\n    'https://core-api-server.onrender.com/find-wallet',\n    params={'walletAddress': '9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM'}\n)"
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n// Example 1: Find by userID\n$url1 = 'https://core-api-server.onrender.com/find-wallet?' . http_build_query(['userID' => 'user-12345']);\n$response1 = file_get_contents($url1);\n$data1 = json_decode($response1, true);\n\n// Example 2: Find by wallet address\n$url2 = 'https://core-api-server.onrender.com/find-wallet?' . http_build_query(['walletAddress' => '9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM']);\n$response2 = file_get_contents($url2);\n$data2 = json_decode($response2, true);\n\nprint_r($data1);\n?>"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/url\"\n)\n\nfunc main() {\n\t// Example 1: Find by userID\n\tbaseURL := \"https://core-api-server.onrender.com/find-wallet\"\n\tparams := url.Values{}\n\tparams.Add(\"userID\", \"user-12345\")\n\tfullURL := baseURL + \"?\" + params.Encode()\n\n\tresp, err := http.Get(fullURL)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tfmt.Println(string(body))\n}"
          },
          {
            "lang": "Java",
            "source": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.net.URLEncoder;\n\npublic class FindWallet {\n    public static void main(String[] args) {\n        try {\n            // Example 1: Find by userID\n            String userID = URLEncoder.encode(\"user-12345\", \"UTF-8\");\n            String urlString = \"https://core-api-server.onrender.com/find-wallet?userID=\" + userID;\n            \n            URL url = new URL(urlString);\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n            conn.setRequestMethod(\"GET\");\n\n            try(BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream(), \"utf-8\"))) {\n                StringBuilder response = new StringBuilder();\n                String responseLine = null;\n                while ((responseLine = br.readLine()) != null) {\n                    response.append(responseLine.trim());\n                }\n                System.out.println(response.toString());\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"
          }
        ],
        "parameters": [
          {
            "name": "userID",
            "in": "query",
            "description": "User ID to search for (provide either this OR walletAddress)",
            "required": false,
            "schema": {
              "type": "string",
              "example": "user-12345"
            }
          },
          {
            "name": "walletAddress",
            "in": "query",
            "description": "Wallet address to search for (provide either this OR userID)",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^[1-9A-HJ-NP-Za-km-z]{32,44}$",
              "example": "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Wallet relation found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindWalletResponse"
                },
                "examples": {
                  "found-by-userid": {
                    "summary": "Found by User ID",
                    "value": {
                      "success": true,
                      "message": "Wallet relation found successfully using userID.",
                      "details": {
                        "searchType": "userID",
                        "searchValue": "user-12345",
                        "relation": {
                          "userId": "user-12345",
                          "walletAddress": "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM",
                          "createdAt": "2024-01-15T10:30:45.123Z",
                          "relationPDA": "xyz789abc123def456ghi..."
                        }
                      }
                    }
                  },
                  "found-by-wallet": {
                    "summary": "Found by Wallet Address",
                    "value": {
                      "success": true,
                      "message": "Wallet relation found successfully using walletAddress.",
                      "details": {
                        "searchType": "walletAddress",
                        "searchValue": "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM",
                        "relation": {
                          "userId": "user-12345",
                          "walletAddress": "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM",
                          "createdAt": "2024-01-15T10:30:45.123Z",
                          "relationPDA": "xyz789abc123def456ghi..."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Input validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindWalletValidationErrorResponse"
                },
                "examples": {
                  "no-parameters": {
                    "summary": "No Parameters Provided",
                    "value": {
                      "error": true,
                      "message": "<error message>",
                      "details": {
                        "validationErrors": [
                          {
                            "type": "invalid_parameters",
                            "message": "<error message>"
                          }
                        ],
                        "provided": {
                          "userID": "not provided",
                          "walletAddress": "not provided"
                        },
                        "examples": [
                          "GET /find-wallet?userID=user123",
                          "GET /find-wallet?walletAddress=9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"
                        ]
                      }
                    }
                  },
                  "both-parameters": {
                    "summary": "Both Parameters Provided",
                    "value": {
                      "error": true,
                      "message": "<error message>",
                      "details": {
                        "validationErrors": [
                          {
                            "type": "invalid_parameters",
                            "message": "<error message>"
                          }
                        ],
                        "provided": {
                          "userID": "provided",
                          "walletAddress": "provided"
                        },
                        "examples": [
                          "GET /find-wallet?userID=user123",
                          "GET /find-wallet?walletAddress=9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"
                        ]
                      }
                    }
                  },
                  "invalid-wallet-format": {
                    "summary": "Invalid Wallet Address Format",
                    "value": {
                      "error": true,
                      "message": "<error message>",
                      "details": {
                        "validationErrors": [
                          {
                            "type": "invalid_format",
                            "field": "walletAddress",
                            "message": "<error message>"
                          }
                        ],
                        "walletAddress": "invalid-address",
                        "example": "GET /find-wallet?walletAddress=9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict - No wallet relation found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindWalletNotFoundResponse"
                },
                "examples": {
                  "userid-not-found": {
                    "summary": "User ID Not Found",
                    "value": {
                      "error": true,
                      "message": "<error message>",
                      "details": {
                        "searchType": "userID",
                        "searchValue": "user-12345",
                        "suggestion": "Try using the wallet address instead, or create a new relation using /link-wallet"
                      }
                    }
                  },
                  "wallet-not-found": {
                    "summary": "Wallet Address Not Found",
                    "value": {
                      "error": true,
                      "message": "<error message>",
                      "details": {
                        "searchType": "walletAddress",
                        "searchValue": "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM",
                        "suggestion": "Try using the user ID instead, or create a new relation using /link-wallet"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerErrorResponse"
                },
                "examples": {
                  "server-error": {
                    "summary": "Internal Server Error",
                    "value": {
                      "error": true,
                      "message": "<error message>"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/link-wallet": {
      "post": {
        "summary": "Link Wallet",
        "description": "Links a user ID to a Solana wallet address by creating an on-chain relationship record.",
        "tags": ["Wallet"],
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl -X POST 'https://core-api-server.onrender.com/link-wallet' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"userID\": \"user-12345\",\n    \"walletAddress\": \"9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM\"\n  }'"
          },
          {
            "lang": "JavaScript",
            "source": "const response = await fetch('https://core-api-server.onrender.com/link-wallet', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({\n    userID: 'user-12345',\n    walletAddress: '9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM'\n  })\n});\n\nconst data = await response.json();\nconsole.log(data);"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nresponse = requests.post(\n    'https://core-api-server.onrender.com/link-wallet',\n    headers={'Content-Type': 'application/json'},\n    json={\n        'userID': 'user-12345',\n        'walletAddress': '9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM'\n    }\n)\n\ndata = response.json()\nprint(data)"
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$url = 'https://core-api-server.onrender.com/link-wallet';\n$data = json_encode([\n    'userID' => 'user-12345',\n    'walletAddress' => '9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM'\n]);\n\n$options = [\n    'http' => [\n        'header' => 'Content-Type: application/json',\n        'method' => 'POST',\n        'content' => $data,\n    ],\n];\n\n$context = stream_context_create($options);\n$result = file_get_contents($url, false, $context);\n$data = json_decode($result, true);\n\nprint_r($data);\n?>"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\turl := \"https://core-api-server.onrender.com/link-wallet\"\n\tpayload := map[string]string{\n\t\t\"userID\":       \"user-12345\",\n\t\t\"walletAddress\": \"9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM\",\n\t}\n\n\tjsonData, _ := json.Marshal(payload)\n\treq, err := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonData))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, _ := ioutil.ReadAll(resp.Body)\n\tfmt.Println(string(body))\n}"
          },
          {
            "lang": "Java",
            "source": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic class LinkWallet {\n    public static void main(String[] args) {\n        try {\n            URL url = new URL(\"https://core-api-server.onrender.com/link-wallet\");\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n            conn.setRequestMethod(\"POST\");\n            conn.setRequestProperty(\"Content-Type\", \"application/json\");\n            conn.setDoOutput(true);\n\n            String jsonInputString = \"{\\\"userID\\\": \\\"user-12345\\\", \\\"walletAddress\\\": \\\"9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM\\\"}\";\n            try(OutputStream os = conn.getOutputStream()) {\n                byte[] input = jsonInputString.getBytes(\"utf-8\");\n                os.write(input, 0, input.length);\n            }\n\n            try(BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream(), \"utf-8\"))) {\n                StringBuilder response = new StringBuilder();\n                String responseLine = null;\n                while ((responseLine = br.readLine()) != null) {\n                    response.append(responseLine.trim());\n                }\n                System.out.println(response.toString());\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkWalletRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Wallet successfully linked to user ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkWalletResponse"
                },
                "examples": {
                  "success": {
                    "summary": "Wallet Linked Successfully",
                    "value": {
                      "message": "Success! The wallet address has been linked to the user ID.",
                      "details": {
                        "userID": "user-12345",
                        "walletAddress": "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM",
                        "status": "submitted",
                        "transactionId": "5J7X2vK8mWzNfEtY2jDw5mVpL1WzNfEtYKJH2mNqR3pB",
                        "explorerUrl": "https://explorer.solana.com/address/8kQv2gFhgRmHq7ZPBx4N9TqJbSx3jDw5mVpL1WzNfEtY?cluster=devnet"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Input validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                },
                "examples": {
                  "missing-fields": {
                    "summary": "Missing Required Fields",
                    "value": {
                      "error": true,
                      "message": "<error message>",
                      "details": {
                        "validationErrors": [
                          {
                            "type": "missing_fields",
                            "fields": ["userID", "walletAddress"],
                            "message": "<error message>"
                          }
                        ]
                      }
                    }
                  },
                  "invalid-wallet-format": {
                    "summary": "Invalid Wallet Address Format",
                    "value": {
                      "error": true,
                      "message": "<error message>",
                      "details": {
                        "validationErrors": [
                          {
                            "type": "invalid_format",
                            "field": "walletAddress",
                            "message": "<error message>"
                          }
                        ]
                      }
                    }
                  },
                  "userid-too-long": {
                    "summary": "User ID Too Long",
                    "value": {
                      "error": true,
                      "message": "<error message>",
                      "details": {
                        "validationErrors": [
                          {
                            "type": "invalid_value",
                            "field": "userID",
                            "message": "<error message>"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict - User ID or wallet already linked",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkWalletConflictResponse"
                },
                "examples": {
                  "userid-already-linked": {
                    "summary": "User ID Already Linked",
                    "value": {
                      "error": true,
                      "message": "<error message>",
                      "details": {
                        "conflictType": "User ID already linked",
                        "userID": "user-12345",
                        "existingWallet": "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM",
                        "suggestion": "Use a different User ID or unlink the existing wallet first"
                      }
                    }
                  },
                  "wallet-already-linked": {
                    "summary": "Wallet Already Linked",
                    "value": {
                      "error": true,
                      "message": "<error message>",
                      "details": {
                        "conflictType": "Wallet already linked",
                        "walletAddress": "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM",
                        "existingUserID": "existing-user",
                        "suggestion": "Use a different wallet address or unlink the existing relation first"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerErrorResponse"
                },
                "examples": {
                  "server-error": {
                    "summary": "Internal Server Error",
                    "value": {
                      "error": true,
                      "message": "<error message>"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/register/identity": {
      "post": {
        "summary": "Register Identity",
        "description": "Initiates identity verification process for a wallet address using Self.xyz ZK identity verification.",
        "tags": ["Identity"],
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl -X POST 'https://core-api-server.onrender.com/register/identity' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"walletAddress\": \"7xKXtg2CW87d97TXJSDpbD5jBkheTqA83TZRuJosgAsU\",\n    \"disclosures\": {\n      \"issuing_state\": false,\n      \"name\": true,\n      \"nationality\": true,\n      \"date_of_birth\": true,\n      \"passport_number\": false,\n      \"gender\": false,\n      \"expiry_date\": false\n    }\n  }'"
          },
          {
            "lang": "JavaScript",
            "source": "const response = await fetch('https://core-api-server.onrender.com/register/identity', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    walletAddress: '7xKXtg2CW87d97TXJSDpbD5jBkheTqA83TZRuJosgAsU',\n    disclosures: {\n      issuing_state: false,\n      name: true,\n      nationality: true,\n      date_of_birth: true,\n      passport_number: false,\n      gender: false,\n      expiry_date: false\n    }\n  })\n});\n\nconst data = await response.json();\nconsole.log(data);"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nresponse = requests.post(\n    'https://core-api-server.onrender.com/register/identity',\n    headers={'Content-Type': 'application/json'},\n    json={\n        'walletAddress': '7xKXtg2CW87d97TXJSDpbD5jBkheTqA83TZRuJosgAsU',\n        'disclosures': {\n            'issuing_state': False,\n            'name': True,\n            'nationality': True,\n            'date_of_birth': True,\n            'passport_number': False,\n            'gender': False,\n            'expiry_date': False\n        }\n    }\n)\n\ndata = response.json()\nprint(data)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterIdentityRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Identity verification session created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterIdentityResponse"
                },
                "examples": {
                  "new-session": {
                    "summary": "New Session Created",
                    "value": {
                      "message": "Identity verification session created successfully",
                      "details": {
                        "qrCodeUrl": "https://trustengine.org/identity-verification?walletAddress=7xKXtg2CW87d97TXJSDpbD5jBkheTqA83TZRuJosgAsU",
                        "walletAddress": "7xKXtg2CW87d97TXJSDpbD5jBkheTqA83TZRuJosgAsU",
                        "selectedDisclosures": {
                          "name": true,
                          "nationality": true,
                          "date_of_birth": true
                        },
                        "status": "pending",
                        "createdAt": "2024-01-15T10:30:00.000Z",
                        "expiresAt": "2024-01-16T10:30:00.000Z",
                        "instructions": "Visit the QR code URL and scan with Self app to verify your identity"
                      }
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "Existing pending session found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterIdentityExistingResponse"
                },
                "examples": {
                  "existing-session": {
                    "summary": "Existing Session Found",
                    "value": {
                      "message": "You already have a pending identity verification session",
                      "details": {
                        "qrCodeUrl": "https://trustengine.org/identity-verification?walletAddress=7xKXtg2CW87d97TXJSDpbD5jBkheTqA83TZRuJosgAsU",
                        "walletAddress": "7xKXtg2CW87d97TXJSDpbD5jBkheTqA83TZRuJosgAsU",
                        "requestedDisclosures": {
                          "name": true,
                          "nationality": true,
                          "date_of_birth": true,
                          "issuing_state": false,
                          "passport_number": false,
                          "gender": false,
                          "expiry_date": false
                        },
                        "status": "pending",
                        "createdAt": "2024-01-15T09:30:00.000Z",
                        "expiresAt": "2024-01-16T09:30:00.000Z",
                        "instructions": "Complete your existing verification or wait for it to expire before starting a new one"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Input validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                },
                "examples": {
                  "missing-wallet": {
                    "summary": "Missing Wallet Address",
                    "value": {
                      "error": true,
                      "message": "<error message>",
                      "details": {
                        "validationErrors": [
                          {
                            "type": "missing_fields",
                            "fields": ["walletAddress"],
                            "message": "<error message>"
                          }
                        ]
                      }
                    }
                  },
                  "invalid-disclosures": {
                    "summary": "Invalid Disclosures",
                    "value": {
                      "error": true,
                      "message": "<error message>",
                      "details": {
                        "validationErrors": [
                          {
                            "type": "invalid_value",
                            "field": "disclosures",
                            "message": "<error message>"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict - No user-key relation found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityConflictErrorResponse"
                },
                "examples": {
                  "no-user-relation": {
                    "summary": "No User-Key Relation",
                    "value": {
                      "error": true,
                      "message": "<error message>",
                      "details": {
                        "missingRequirement": "User-Key Relation",
                        "walletAddress": "7xKXtg2CW87d97TXJSDpbD5jBkheTqA83TZRuJosgAsU",
                        "suggestion": "Use the /link-wallet endpoint to link your wallet to a user ID first",
                        "alternative": "Use the /create-wallet endpoint to create a new wallet with automatic user ID linking",
                        "findExisting": "Use the /find-wallet endpoint to check if a relation already exists"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },

    "/identity/session/{walletAddress}": {
      "get": {
        "summary": "Get Identity Session",
        "description": "Retrieves the current identity verification session status and verified data for a specific wallet address.",
        "tags": ["Identity"],
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl -X GET 'https://core-api-server.onrender.com/identity/session/7xKXtg2CW87d97TXJSDpbD5jBkheTqA83TZRuJosgAsU' \\\n  -H 'Accept: application/json'"
          },
          {
            "lang": "JavaScript",
            "source": "const walletAddress = '7xKXtg2CW87d97TXJSDpbD5jBkheTqA83TZRuJosgAsU';\nconst response = await fetch(\n  `https://core-api-server.onrender.com/identity/session/${walletAddress}`,\n  {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json'\n    }\n  }\n);\n\nconst data = await response.json();\nconsole.log(data);"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nwallet_address = '7xKXtg2CW87d97TXJSDpbD5jBkheTqA83TZRuJosgAsU'\nresponse = requests.get(\n    f'https://core-api-server.onrender.com/identity/session/{wallet_address}',\n    headers={'Accept': 'application/json'}\n)\n\ndata = response.json()\nprint(data)"
          }
        ],
        "parameters": [
          {
            "name": "walletAddress",
            "in": "path",
            "description": "Valid Solana wallet address (Base58 format) to check verification status for",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[1-9A-HJ-NP-Za-km-z]{32,44}$",
              "example": "7xKXtg2CW87d97TXJSDpbD5jBkheTqA83TZRuJosgAsU"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Identity session retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetIdentitySessionResponse"
                },
                "examples": {
                  "pending-session": {
                    "summary": "Pending Session",
                    "value": {
                      "message": "Identity verification session retrieved successfully",
                      "details": {
                        "walletAddress": "7xKXtg2CW87d97TXJSDpbD5jBkheTqA83TZRuJosgAsU",
                        "status": "pending",
                        "createdAt": "2024-01-15T10:30:00.000Z",
                        "expiresAt": "2024-01-16T10:30:00.000Z",
                        "verifiedAt": null,
                        "requestedDisclosures": {
                          "name": true,
                          "nationality": true,
                          "date_of_birth": true,
                          "issuing_state": false,
                          "passport_number": false,
                          "gender": false,
                          "expiry_date": false
                        },
                        "verifiedData": null
                      }
                    }
                  },
                  "verified-session": {
                    "summary": "Verified Session",
                    "value": {
                      "message": "Identity verification session retrieved successfully",
                      "details": {
                        "walletAddress": "7xKXtg2CW87d97TXJSDpbD5jBkheTqA83TZRuJosgAsU",
                        "status": "verified",
                        "createdAt": "2024-01-15T10:30:00.000Z",
                        "expiresAt": "2024-01-16T10:30:00.000Z",
                        "verifiedAt": "2024-01-15T11:15:30.000Z",
                        "requestedDisclosures": {
                          "name": true,
                          "nationality": true,
                          "date_of_birth": true,
                          "issuing_state": false,
                          "passport_number": false,
                          "gender": false,
                          "expiry_date": false
                        },
                        "verifiedData": {
                          "verified_name": "John Doe",
                          "verified_nationality": "USA",
                          "verified_date_of_birth": "1990-05-15",
                          "verified_passport_number": null,
                          "verified_gender": null,
                          "verified_issuing_state": null,
                          "verified_expiry_date": null,
                          "self_user_id": "0x7xKXtg2CW87d97TXJSDpbD5jBkheTqA83TZRuJosgAsU"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid wallet address",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                },
                "examples": {
                  "missing-wallet-address": {
                    "summary": "Missing Wallet Address",
                    "value": {
                      "error": true,
                      "message": "<error message>",
                      "details": {
                        "usage": "GET /identity/session/{walletAddress}"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Session not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentitySessionNotFoundResponse"
                },
                "examples": {
                  "session-not-found": {
                    "summary": "Session Not Found",
                    "value": {
                      "error": true,
                      "message": "<error message>",
                      "details": {
                        "walletAddress": "7xKXtg2CW87d97TXJSDpbD5jBkheTqA83TZRuJosgAsU",
                        "suggestion": "No identity verification session found for this wallet"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/transactions": {
      "post": {
        "summary": "Submit Transaction",
        "description": "Submits a pre-signed transaction to the Solana blockchain with server-side fee payment and confirmation.",
        "tags": ["Transactions"],
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl -X POST 'https://core-api-server.onrender.com/transactions' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"transaction\": \"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAEDArczbMia1tLmq2poQiNXU2xnkV4S4gK9bS6Kz...\"\n  }'"
          },
          {
            "lang": "JavaScript",
            "source": "const response = await fetch('https://core-api-server.onrender.com/transactions', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({\n    transaction: 'AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAEDArczbMia1tLmq2poQiNXU2xnkV4S4gK9bS6Kz...'\n  })\n});\n\nconst data = await response.json();\nconsole.log(data);"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nresponse = requests.post(\n    'https://core-api-server.onrender.com/transactions',\n    headers={'Content-Type': 'application/json'},\n    json={\n        'transaction': 'AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAEDArczbMia1tLmq2poQiNXU2xnkV4S4gK9bS6Kz...'\n    }\n)\n\ndata = response.json()\nprint(data)"
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$data = json_encode([\n    'transaction' => 'AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAEDArczbMia1tLmq2poQiNXU2xnkV4S4gK9bS6Kz...'\n]);\n\n$context = stream_context_create([\n    'http' => [\n        'method' => 'POST',\n        'header' => 'Content-Type: application/json',\n        'content' => $data\n    ]\n]);\n\n$response = file_get_contents('https://core-api-server.onrender.com/transactions', false, $context);\n$result = json_decode($response, true);\n\nprint_r($result);\n?>"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tpayload := map[string]string{\n\t\t\"transaction\": \"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAEDArczbMia1tLmq2poQiNXU2xnkV4S4gK9bS6Kz...\",\n\t}\n\n\tpayloadBytes, _ := json.Marshal(payload)\n\n\tresp, err := http.Post(\n\t\t\"https://core-api-server.onrender.com/transactions\",\n\t\t\"application/json\",\n\t\tbytes.NewBuffer(payloadBytes),\n\t)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, _ := ioutil.ReadAll(resp.Body)\n\tfmt.Println(string(body))\n}"
          },
          {
            "lang": "Java",
            "source": "import java.io.OutputStream;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic class SubmitTransaction {\n    public static void main(String[] args) {\n        try {\n            URL url = new URL(\"https://core-api-server.onrender.com/transactions\");\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n            conn.setRequestMethod(\"POST\");\n            conn.setRequestProperty(\"Content-Type\", \"application/json\");\n            conn.setDoOutput(true);\n\n            String jsonPayload = \"{\\\"transaction\\\":\\\"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAEDArczbMia1tLmq2poQiNXU2xnkV4S4gK9bS6Kz...\\\"}\";\n\n            try(OutputStream os = conn.getOutputStream()) {\n                byte[] input = jsonPayload.getBytes(\"utf-8\");\n                os.write(input, 0, input.length);\n            }\n\n            try(BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream(), \"utf-8\"))) {\n                StringBuilder response = new StringBuilder();\n                String responseLine = null;\n                while ((responseLine = br.readLine()) != null) {\n                    response.append(responseLine.trim());\n                }\n                System.out.println(response.toString());\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitTransactionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transaction submitted and confirmed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubmitTransactionResponse"
                },
                "examples": {
                  "success": {
                    "summary": "Successful Transaction Submission",
                    "value": {
                      "message": "Transaction submitted and confirmed successfully!",
                      "details": {
                        "transactionId": "7DpZxJy3wKzRqTnV8mYpH4xL9WvNfEtY2jDw5mVpQcfG",
                        "explorerUrl": "https://explorer.solana.com/address/7DpZxJy3wKzRqTnV8mYpH4xL9WvNfEtY2jDw5mVpQcfG?cluster=devnet"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Input validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubmitTransactionValidationErrorResponse"
                },
                "examples": {
                  "missing-transaction": {
                    "summary": "Missing Transaction Field",
                    "value": {
                      "error": true,
                      "message": "<error message>",
                      "details": {
                        "validationErrors": [
                          {
                            "type": "missing_fields",
                            "fields": ["transaction"],
                            "message": "<error message>"
                          }
                        ]
                      }
                    }
                  },
                  "invalid-type": {
                    "summary": "Invalid Type",
                    "value": {
                      "error": true,
                      "message": "<error message>",
                      "details": {
                        "validationErrors": [
                          {
                            "type": "invalid_types",
                            "fields": ["transaction"],
                            "message": "<error message>"
                          }
                        ]
                      }
                    }
                  },
                  "invalid-base64": {
                    "summary": "Invalid Base64 Format",
                    "value": {
                      "error": true,
                      "message": "<error message>",
                      "details": {
                        "validationErrors": [
                          {
                            "type": "invalid_format",
                            "field": "transaction",
                            "message": "<error message>"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerErrorResponse"
                },
                "examples": {
                  "transaction-failed": {
                    "summary": "Transaction Submission Failed",
                    "value": {
                      "error": true,
                      "message": "<error message>"
                    }
                  },
                  "network-error": {
                    "summary": "Network Error",
                    "value": {
                      "error": true,
                      "message": "<error message>",
                      "details": {
                        "error": "Network request failed"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "responses": {
      "ErrorResponse": {
        "description": "An error response.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      }
    },
    "schemas": {
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "details": {
            "type": "object"
          }
        }
      },

      "SearchRequest": {
        "type": "object",
        "properties": {
          "contentHash": {
            "type": "string",
            "description": "SHA256 hash of the file content (hex encoded)",
            "pattern": "^[a-fA-F0-9]{64}$",
            "example": "a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3"
          },
          "walletAddress": {
            "type": "string",
            "description": "Optional wallet address to filter search results to specific registrations",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{32,44}$",
            "example": "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"
          }
        },
        "required": ["contentHash"]
      },
      "SearchResponse": {
        "type": "object",
        "properties": {
          "searchMode": {
            "type": "string",
            "enum": ["content_hash_only", "content_hash_and_wallet"],
            "description": "The type of search performed"
          },
          "message": {
            "type": "string",
            "description": "Success message describing search results"
          },
          "searchCriteria": {
            "type": "object",
            "description": "The search parameters that were used",
            "properties": {
              "contentHash": {
                "type": "string",
                "description": "The content hash that was searched for"
              },
              "walletAddress": {
                "type": "string",
                "description": "The wallet address filter (if provided)"
              }
            },
            "required": ["contentHash"]
          },
          "totalResults": {
            "type": "integer",
            "description": "Number of registration records found"
          },
          "registrations": {
            "type": "array",
            "description": "Array of matching registration records",
            "items": {
              "$ref": "#/components/schemas/SearchRegistration"
            }
          }
        },
        "required": ["searchMode", "message", "searchCriteria", "totalResults", "registrations"]
      },
      "SearchRegistration": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the file"
          },
          "contentHash": {
            "type": "string",
            "description": "SHA256 hash of the file content"
          },
          "pdaAddress": {
            "type": "string",
            "description": "Solana Program Derived Address for this registration"
          },
          "ipfsCid": {
            "type": "string",
            "description": "IPFS Content Identifier for metadata storage"
          },
          "registeredBy": {
            "type": "string",
            "description": "Wallet address that registered the file"
          },
          "userID": {
            "type": "string",
            "nullable": true,
            "description": "Associated user ID (null if no relation found)"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "ISO timestamp when file was registered"
          },
          "status": {
            "type": "string",
            "description": "Status of the registration"
          },
          "explorerUrl": {
            "type": "string",
            "description": "Link to view on Solana Explorer"
          },
          "metadata": {
            "type": "string",
            "description": "Metadata stored off chain"
          },
          "identity_data": {
            "type": "object",
            "description": "Identity data stored off chain"
          }
        },
        "required": ["title", "contentHash", "pdaAddress", "ipfsCid", "registeredBy", "userID", "timestamp", "explorerUrl", "status", "metadata", "identity_data"]
      },
      "SearchValidationErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Error message describing validation failure"
          },
          "details": {
            "type": "object",
            "properties": {
              "validationErrors": {
            "type": "array",
            "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": ["missing_fields", "invalid_types", "invalid_format"]
                    },
                    "fields": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "field": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
            }
          }
        }
      },
            "required": ["validationErrors"]
          }
        },
        "required": ["error", "message", "details"]
      },
      "SearchNotFoundResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Error message indicating no registrations were found"
          },
          "details": {
            "type": "object",
            "properties": {
              "searchedContentHash": {
                "type": "string",
                "description": "The content hash that was searched for"
              },
              "searchedWalletAddress": {
                "type": "string",
                "description": "The wallet address that was searched for (if provided)"
              },
              "searchMode": {
                "type": "string",
                "enum": ["All Registrations", "Specific Registration"],
                "description": "The type of search that was performed"
              }
            },
            "required": ["searchedContentHash", "searchMode"]
          }
        },
        "required": ["error", "message", "details"]
      },
      "RegisterFileRequest": {
        "type": "object",
        "properties": {
          "contentTitle": {
            "type": "string",
            "description": "Title for the content being registered",
            "example": "My Important Document"
          },
          "walletAddress": {
            "type": "string",
            "description": "User's public Solana wallet address",
            "example": "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"
          },
          "walletType": {
            "type": "string",
            "description": "Wallet provider type",
            "enum": ["self", "managed"],
            "example": "managed"
          },
          "contentHash": {
            "type": "string",
            "description": "SHA256 hash of the file content (hex encoded)",
            "pattern": "^[a-fA-F0-9]{64}$",
            "example": "a7b2c3d4e5f6789abcdef0123456789abcdef0123456789abcdef0123456789"
          },
          "fileMetadata": {
            "type": "object",
            "description": "Metadata about the file being registered",
            "properties": {
              "fileName": {
                "type": "string",
                "example": "document.pdf"
              },
              "fileSize": {
                "type": "number",
                "example": 245760
              },
              "mimeType": {
                "type": "string",
                "example": "application/pdf"
              }
            }
          },
          "metadata": {
            "type": "string",
            "description": "Additional metadata about the file",
            "maxLength": 500,
            "example": "Important legal document for verification"
          },
          "returnActionLink": {
            "type": "boolean",
            "description": "Return an action link for transaction signing (self wallets only). When true, instead of returning the raw transaction, an action link is generated for secure browser-based signing.",
            "example": true,
            "default": false
          }
        },
        "required": ["contentTitle", "walletAddress", "walletType", "contentHash"]
      },
      "RegisterFileManagedResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Success message for submitted transaction"
          },
          "details": {
            "type": "object",
            "description": "Submitted transaction details for managed wallets",
            "properties": {
              "status": {
                "type": "string",
                "enum": ["submitted"],
                "description": "Transaction status"
              },
              "transactionId": {
                "type": "string",
                "description": "Submitted transaction ID"
              },
              "contentRegistrationPDA": {
                "type": "string",
                "description": "Program Derived Address for the content registration"
              },
              "contentHash": {
                "type": "string",
                "description": "SHA256 hash of the registered file"
              },
              "ipfsCid": {
                "type": "string",
                "description": "IPFS Content Identifier for the metadata"
              },
              "explorerUrl": {
                "type": "string",
                "description": "Solana explorer URL for the transaction"
              }
            },
            "required": ["status", "transactionId", "contentRegistrationPDA", "contentHash", "ipfsCid", "explorerUrl"]
          }
        },
        "required": ["message", "details"]
      },
      "RegisterFileSelfResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Success message for prepared transaction"
          },
          "details": {
            "type": "object",
            "description": "Transaction preparation details for self wallets",
            "properties": {
              "status": {
                "type": "string",
                "enum": ["requires-client-signature"],
                "description": "Transaction status"
              },
              "transaction": {
                "type": "string",
                "description": "Base64-encoded transaction ready for client signing"
              },
              "ipfsCid": {
                "type": "string",
                "description": "IPFS Content Identifier for the metadata"
              },
              "contentRegistrationPDA": {
                "type": "string",
                "description": "Program Derived Address for the content registration"
              },
              "contentHash": {
                "type": "string",
                "description": "SHA256 hash of the registered file"
              }
            },
            "required": ["status", "transaction", "ipfsCid", "contentRegistrationPDA", "contentHash"]
          }
        },
        "required": ["message", "details"]
      },
      "RegisterFileActionLinkResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Success message for action link creation"
          },
          "details": {
            "type": "object",
            "description": "Action link details for secure transaction signing",
            "properties": {
              "status": {
                "type": "string",
                "enum": ["action-link-created"],
                "description": "Transaction status"
              },
              "actionLink": {
                "type": "string",
                "description": "Secure URL for transaction signing via browser wallet",
                "example": "http://trustengine.org/tx-action/abc123def456789"
              },
              "token": {
                "type": "string",
                "description": "Unique token for database lookup",
                "example": "abc123def456789"
              },
              "expiresAt": {
                "type": "string",
                "format": "date-time",
                "description": "Expiration timestamp for the action link (ISO 8601)",
                "example": "2024-01-25T15:30:00.000Z"
              },
              "contentHash": {
                "type": "string",
                "description": "SHA256 hash of the registered file",
                "example": "a7b2c3d4e5f6789abcdef0123456789abcdef0123456789abcdef0123456789"
              }
            },
            "required": ["status", "actionLink", "token", "expiresAt", "contentHash"]
          }
        },
        "required": ["message", "details"]
      },
      "ValidationErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": true
          },
          "message": {
                "type": "string",
            "example": "Input validation failed"
          },
          "details": {
            "type": "object",
            "properties": {
              "validationErrors": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": ["missing_fields", "invalid_types", "invalid_value", "invalid_format"]
                    },
                    "field": {
                      "type": "string"
                    },
                    "fields": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "message": {
                      "type": "string"
                    }
                  }
              }
            }
          }
        }
      },
        "required": ["error", "message", "details"]
      },
      "ConflictErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "object",
            "oneOf": [
              {
                "properties": {
                  "contentHash": {
                    "type": "string"
                  },
                  "pdaAddress": {
                    "type": "string"
                  },
                  "suggestion": {
                    "type": "string"
                  }
                }
              },
              {
                "properties": {
                  "missingRequirement": {
                    "type": "string"
                  },
                  "walletAddress": {
                    "type": "string"
                  },
                  "suggestion": {
                    "type": "string"
                  },
                  "alternative": {
                    "type": "string"
                  },
                  "findExisting": {
                    "type": "string"
                  }
                }
              }
            ]
          }
        },
        "required": ["error", "message", "details"]
      },
      "ServerErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Internal server error."
          }
        },
        "required": ["error", "message"]
      },
      "CreateWalletRequest": {
        "type": "object",
        "properties": {
          "userID": {
            "type": "string",
            "description": "Unique identifier for the user",
            "maxLength": 50,
            "example": "user-12345"
          }
        },
        "required": ["userID"]
      },
      "CreateWalletResponse": {
        "type": "object",
        "properties": {
          "message": {
                "type": "string",
            "description": "Success message confirming wallet creation"
          },
          "details": {
            "type": "object",
            "description": "Wallet creation details",
            "properties": {
          "walletAddress": {
            "type": "string",
                "description": "The newly created Solana wallet address"
              },
              "chain": {
                "type": "string",
                "enum": ["solana"],
                "description": "Blockchain network identifier"
              },
              "transactionId": {
                "type": "string",
                "description": "On-chain transaction ID for the wallet-user relationship"
              },
              "explorerUrl": {
                "type": "string",
                "description": "Direct link to view the transaction on Solana Explorer"
              },
              "userID": {
                "type": "string",
                "description": "User ID linked to the wallet"
              }
            },
            "required": ["walletAddress", "chain", "transactionId", "explorerUrl", "userID"]
          }
        },
        "required": ["message", "details"]
      },
      "CreateWalletConflictResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Error message describing the conflict"
          },
          "details": {
            "type": "object",
            "oneOf": [
              {
                "properties": {
                  "conflictType": {
                    "type": "string",
                    "enum": ["User ID already linked"]
                  },
                  "userID": {
                    "type": "string"
                  },
                  "existingWallet": {
                    "type": "string"
                  },
                  "suggestion": {
                    "type": "string"
                  }
                }
              },
              {
                "properties": {
                  "conflictType": {
                    "type": "string",
                    "enum": ["Wallet already linked"]
                  },
                  "walletAddress": {
                    "type": "string"
                  },
                  "existingUserID": {
                    "type": "string"
                  },
                  "suggestion": {
                    "type": "string"
                  }
                }
              }
            ]
          }
        },
        "required": ["error", "message", "details"]
      },
      "LinkWalletRequest": {
        "type": "object",
        "properties": {
          "userID": {
            "type": "string",
            "description": "Unique identifier for the user",
            "maxLength": 200,
            "example": "user-12345"
          },
          "walletAddress": {
            "type": "string",
            "description": "Valid Solana wallet address in Base58 format",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{32,44}$",
            "example": "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"
          }
        },
        "required": ["userID", "walletAddress"]
      },
      "LinkWalletResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Success message confirming the link"
          },
          "details": {
            "type": "object",
            "description": "Link creation details",
            "properties": {
              "userID": {
                "type": "string",
                "description": "The user ID that was linked"
              },
              "walletAddress": {
                "type": "string",
                "description": "The wallet address that was linked"
              },
              "status": {
                "type": "string",
                "enum": ["submitted"],
                "description": "Transaction status"
              },
              "transactionId": {
                "type": "string",
                "description": "Solana transaction ID for the relationship creation"
              },
              "explorerUrl": {
                "type": "string",
                "description": "Direct link to view the transaction on Solana Explorer"
              }
            },
            "required": ["userID", "walletAddress", "status", "transactionId", "explorerUrl"]
          }
        },
        "required": ["message", "details"]
      },
      "LinkWalletConflictResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Error message describing the conflict"
          },
          "details": {
            "type": "object",
            "oneOf": [
              {
            "properties": {
                  "conflictType": {
                "type": "string",
                    "enum": ["User ID already linked"]
                  },
                  "userID": {
                    "type": "string"
                  },
                  "existingWallet": {
                    "type": "string"
                  },
                  "suggestion": {
                    "type": "string"
                  }
                }
              },
              {
                "properties": {
                  "conflictType": {
                "type": "string",
                    "enum": ["Wallet already linked"]
                  },
                  "walletAddress": {
                    "type": "string"
                  },
                  "existingUserID": {
                    "type": "string"
                  },
                  "suggestion": {
                    "type": "string"
                  }
                }
              }
            ]
          }
        },
        "required": ["error", "message", "details"]
      },
      "FindWalletResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates successful search"
          },
          "message": {
            "type": "string",
            "description": "Success message describing the result"
          },
          "details": {
            "type": "object",
            "description": "Search results and relation details",
            "properties": {
              "searchType": {
                "type": "string",
                "enum": ["userID", "walletAddress"],
                "description": "The type of search performed"
              },
              "searchValue": {
                "type": "string",
                "description": "The value that was searched for"
              },
              "relation": {
                "type": "object",
                "description": "The found relationship details",
                "properties": {
                  "userId": {
                    "type": "string",
                    "description": "The user ID in the relationship"
                  },
                  "walletAddress": {
                    "type": "string",
                    "description": "The wallet address in the relationship"
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "ISO timestamp when the relationship was created"
                  },
                  "relationPDA": {
                    "type": "string",
                    "description": "Program Derived Address for this relationship"
                  }
                },
                "required": ["userId", "walletAddress", "createdAt", "relationPDA"]
              }
            },
            "required": ["searchType", "searchValue", "relation"]
          }
        },
        "required": ["success", "message", "details"]
      },
      "FindWalletValidationErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Error message describing validation failure"
          },
          "details": {
            "type": "object",
            "properties": {
              "validationErrors": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": ["invalid_parameters", "invalid_types", "invalid_format"]
                    },
                    "field": {
                      "type": "string"
                    },
                    "message": {
                    "type": "string"
                  }
                }
              }
              },
              "provided": {
                "type": "object",
                "properties": {
                  "userID": {
                    "type": "string",
                    "enum": ["provided", "not provided"]
                  },
                  "walletAddress": {
                    "type": "string",
                    "enum": ["provided", "not provided"]
                  }
                }
              },
              "examples": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "userID": {
                "type": "string"
              },
              "walletAddress": {
                "type": "string"
              },
              "example": {
                "type": "string"
              }
            }
          }
        },
        "required": ["error", "message", "details"]
      },
      "FindWalletNotFoundResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Error message indicating no relation was found"
          },
          "details": {
            "type": "object",
            "properties": {
              "searchType": {
            "type": "string",
                "enum": ["userID", "walletAddress"],
                "description": "The type of search that was performed"
              },
              "searchValue": {
                "type": "string",
                "description": "The value that was searched for"
              },
              "suggestion": {
                "type": "string",
                "description": "Suggestion for resolving the issue"
              }
            },
            "required": ["searchType", "searchValue", "suggestion"]
          }
        },
        "required": ["error", "message", "details"]
      },
      "SubmitTransactionRequest": {
        "type": "object",
        "properties": {
          "transaction": {
            "type": "string",
            "description": "Base64 encoded transaction",
            "example": "AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAEDArczbMia1tLmq2poQiNXU2xnkV4S4gK9bS6Kz..."
          }
        },
        "required": ["transaction"]
      },
      "SubmitTransactionResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Success confirmation message"
          },
          "details": {
            "type": "object",
            "description": "Transaction submission details",
            "properties": {
              "transactionId": {
                "type": "string",
                "description": "The confirmed transaction ID on Solana"
              },
              "explorerUrl": {
                "type": "string",
                "description": "Direct link to view the transaction on Solana Explorer"
              }
            },
            "required": ["transactionId", "explorerUrl"]
          }
        },
        "required": ["message", "details"]
      },
      "SubmitTransactionValidationErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": true
          },
          "message": {
                "type": "string",
            "description": "Error message describing validation failure"
          },
          "details": {
            "type": "object",
            "properties": {
              "validationErrors": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": ["missing_fields", "invalid_types", "invalid_format"]
                    },
                    "fields": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "field": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "required": ["validationErrors"]
          }
        },
        "required": ["error", "message", "details"]
      },


      "Health": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "All systems operational!"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
                "example": "2024-01-15T10:30:45.123Z"
              }
            }
      },
      "WalletBalanceRequest": {
        "type": "object",
        "properties": {
          "walletAddress": {
            "type": "string",
            "description": "Wallet address to check balance for",
            "example": "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"
          }
        },
        "required": ["walletAddress"]
      },
      "WalletBalanceResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Wallet balance retrieved successfully."
          },
          "details": {
            "type": "object",
            "properties": {
              "walletAddress": {
                "type": "string",
                "example": "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"
              },
              "balanceSOL": {
                "type": "number",
                "example": 1.5
              },
              "balanceLamports": {
                "type": "number",
                "example": 1500000000
              },
              "chain": {
                "type": "string",
                "example": "solana-devnet"
              }
            }
          }
        }
      },
      "RegisterIdentityRequest": {
        "type": "object",
        "properties": {
          "walletAddress": {
            "type": "string",
            "description": "Valid Solana wallet address (Base58 format)",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{32,44}$",
            "example": "7xKXtg2CW87d97TXJSDpbD5jBkheTqA83TZRuJosgAsU"
          },
          "disclosures": {
            "type": "object",
            "description": "Object specifying which identity fields to request verification for. All 7 fields must be explicitly provided with boolean values.",
            "properties": {
              "issuing_state": {
                "type": "boolean",
                "description": "Country/state that issued the ID document"
              },
              "name": {
                "type": "boolean",
                "description": "Full name from ID document"
              },
              "nationality": {
                "type": "boolean",
                "description": "Nationality/citizenship"
              },
              "date_of_birth": {
                "type": "boolean",
                "description": "Date of birth"
              },
              "passport_number": {
                "type": "boolean",
                "description": "Document/passport number"
              },
              "gender": {
                "type": "boolean",
                "description": "Gender from ID document"
              },
              "expiry_date": {
                "type": "boolean",
                "description": "Document expiration date"
              }
            },
            "required": ["issuing_state", "name", "nationality", "date_of_birth", "passport_number", "gender", "expiry_date"],
            "example": {
              "issuing_state": false,
              "name": true,
              "nationality": true,
              "date_of_birth": true,
              "passport_number": false,
              "gender": false,
              "expiry_date": false
            }
          }
        },
        "required": ["walletAddress", "disclosures"]
      },
      "RegisterIdentityResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Confirmation that the identity verification session was created"
          },
          "details": {
            "type": "object",
            "properties": {
              "qrCodeUrl": {
                "type": "string",
                "description": "URL for identity verification that can be opened in Self.xyz app"
              },
              "walletAddress": {
                "type": "string",
                "description": "The wallet address for this verification session"
              },
              "selectedDisclosures": {
                "type": "object",
                "description": "Object showing which identity fields were requested (only shows true values)"
              },
              "status": {
                "type": "string",
                "enum": ["pending"],
                "description": "Current verification status"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "description": "ISO timestamp when the session was created"
              },
              "expiresAt": {
                "type": "string",
                "format": "date-time",
                "description": "ISO timestamp when the session expires (24 hours from creation)"
              },
              "instructions": {
                "type": "string",
                "description": "User-friendly instructions for completing verification"
              }
            },
            "required": ["qrCodeUrl", "walletAddress", "selectedDisclosures", "status", "createdAt", "expiresAt", "instructions"]
          }
        },
        "required": ["message", "details"]
      },
      "RegisterIdentityExistingResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Message indicating an existing pending session was found"
          },
          "details": {
            "type": "object",
            "properties": {
              "qrCodeUrl": {
                "type": "string",
                "description": "URL for identity verification"
              },
              "walletAddress": {
                "type": "string",
                "description": "The wallet address for this verification session"
              },
              "requestedDisclosures": {
                "type": "object",
                "description": "All disclosure fields with boolean values"
              },
              "status": {
                "type": "string",
                "enum": ["pending"],
                "description": "Current verification status"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "description": "ISO timestamp when the session was created"
              },
              "expiresAt": {
                "type": "string",
                "format": "date-time",
                "description": "ISO timestamp when the session expires"
              },
              "instructions": {
                "type": "string",
                "description": "Instructions for the existing session"
              }
            },
            "required": ["qrCodeUrl", "walletAddress", "requestedDisclosures", "status", "createdAt", "expiresAt", "instructions"]
          }
        },
        "required": ["message", "details"]
      },
      "IdentityConflictErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Error message describing the missing requirement"
          },
          "details": {
            "type": "object",
            "properties": {
              "missingRequirement": {
                "type": "string",
                "description": "What requirement is missing"
              },
              "walletAddress": {
                "type": "string",
                "description": "The wallet address that was checked"
              },
              "suggestion": {
                "type": "string",
                "description": "Suggestion for resolving the issue"
              },
              "alternative": {
                "type": "string",
                "description": "Alternative solution"
              },
              "findExisting": {
                "type": "string",
                "description": "How to check for existing relations"
              }
            },
            "required": ["missingRequirement", "walletAddress", "suggestion", "alternative", "findExisting"]
          }
        },
        "required": ["error", "message", "details"]
      },

      "IdentitySessionNotFoundResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Error message indicating session not found"
          },
          "details": {
            "type": "object",
            "properties": {
              "walletAddress": {
                "type": "string",
                "description": "The wallet address that was searched"
              },
              "suggestion": {
                "type": "string",
                "description": "Suggestion for the issue"
              }
            },
            "required": ["walletAddress"]
          }
        },
        "required": ["error", "message", "details"]
      },
      "IdentitySessionConflictResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Error message describing the conflict"
          },
          "details": {
            "type": "object",
            "properties": {
              "currentStatus": {
                "type": "string",
                "description": "Current status of the session"
              },
              "walletAddress": {
                "type": "string",
                "description": "The wallet address"
              },
              "expiredAt": {
                "type": "string",
                "format": "date-time",
                "description": "When the session expired (for expired sessions)"
              }
            },
            "required": ["walletAddress"]
          }
        },
        "required": ["error", "message", "details"]
      },
      "GetIdentitySessionResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Confirmation that the session was retrieved successfully"
          },
          "details": {
            "type": "object",
            "properties": {
              "walletAddress": {
                "type": "string",
                "description": "The wallet address for this verification session"
              },
              "status": {
                "type": "string",
                "enum": ["pending", "verified", "failed", "expired"],
                "description": "Current verification status"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "description": "ISO timestamp when the session was created"
              },
              "expiresAt": {
                "type": "string",
                "format": "date-time",
                "description": "ISO timestamp when the session expires (24 hours from creation)"
              },
              "verifiedAt": {
                "type": "string",
                "format": "date-time",
                "nullable": true,
                "description": "ISO timestamp when verification was completed (null if not yet verified)"
              },
              "requestedDisclosures": {
                "type": "object",
                "description": "Object showing which identity fields were requested for verification",
                "properties": {
                  "issuing_state": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "boolean"
                  },
                  "nationality": {
                    "type": "boolean"
                  },
                  "date_of_birth": {
                    "type": "boolean"
                  },
                  "passport_number": {
                    "type": "boolean"
                  },
                  "gender": {
                    "type": "boolean"
                  },
                  "expiry_date": {
                    "type": "boolean"
                  }
                }
              },
              "verifiedData": {
                "type": "object",
                "nullable": true,
                "description": "Contains the actual verified identity data (only present when status is 'verified')",
                "properties": {
                  "verified_issuing_state": {
                    "type": "string",
                    "nullable": true,
                    "description": "Country/state that issued the ID document"
                  },
                  "verified_name": {
                    "type": "string",
                    "nullable": true,
                    "description": "Full name from the ID document"
                  },
                  "verified_nationality": {
                    "type": "string",
                    "nullable": true,
                    "description": "Nationality/citizenship"
                  },
                  "verified_date_of_birth": {
                    "type": "string",
                    "nullable": true,
                    "description": "Date of birth from the document"
                  },
                  "verified_passport_number": {
                    "type": "string",
                    "nullable": true,
                    "description": "Document/passport number"
                  },
                  "verified_gender": {
                    "type": "string",
                    "nullable": true,
                    "description": "Gender from the ID document"
                  },
                  "verified_expiry_date": {
                    "type": "string",
                    "nullable": true,
                    "description": "Document expiration date"
                  },
                  "self_user_id": {
                    "type": "string",
                    "description": "Unique identifier from Self.xyz verification system"
                  }
                }
              }
            },
            "required": ["walletAddress", "status", "createdAt", "expiresAt", "verifiedAt", "requestedDisclosures", "verifiedData"]
          }
        },
        "required": ["message", "details"]
      }
    }
  }
}